# .github/workflows/ci.yaml
name: Test app with DB and build, upload images
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'

jobs:
  postgres-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_DB: ${{ secrets.PG_DB_GINROOT }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASS_GINROOT }}
          POSTGRES_PORT: 5432
          POSTGRES_USER: ${{ secrets.PG_USER_GINROOT }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client

      - name: Query Database and Import SQL
        run: psql -h localhost -d test_db -U admin -c 'CREATE TABLE template (id integer primary key generated always as identity, 
                                                 language character varying(20) NOT NULL, 
                                                 framework character varying(20), 
                                                 app_type character varying(20), 
                                                 db_type character varying(20), 
                                                 cloud_provider character varying(20) NOT NULL, 
                                                 iac_type character varying(20) NOT NULL, 
                                                 deployment_type character varying(20) NOT NULL, 
                                                 repo_url character varying(255) NOT NULL);'
        env:
          PGPASSWORD: ${{ secrets.PG_PASS_GINROOT }}
          
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry install          

      - name: Test application's code with Poetry
        env: 
          PROJECT_NAME: template_svc
          POSTGRES_SERVER: localhost:${{ job.services.postgres.ports[5432] }}  # :5432
          POSTGRES_USER: ${{ secrets.PG_USER_GINROOT }}
          POSTGRES_PASSWORD: ${{ secrets.PG_PASS_GINROOT }}
          POSTGRES_DB: ${{ secrets.PG_DB_GINROOT }}
        run: |
          poetry config --local virtualenvs.in-project true
          poetry lock --no-update
          poetry run pytest -v app
       
  build-image-upload-to-aws-ecr:
    needs: postgres-test
    runs-on: ubuntu-latest
    
    outputs:
      output1: ${{ steps.login-ecr.outputs.registry }}
      output2: ${{ steps.slug.outputs.branch-name-slug }}-${{ steps.slug.outputs.commit-hash-short }}
    
    steps:
      - name: Configure AWS Credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::195652531345:role/ginroot-ecr-gha
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GINROOT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_GINROOT }}
          role-duration-seconds: 3600
          role-session-name: ECRSession
          mask-aws-account-id: 'false'
     
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check out the code
        uses: actions/checkout@v2
     
      - name: Get slug values of branch/tag/version
        uses: gacts/github-slug@v1
        id: slug
   
      - name: TAG for the Main branch. AWS ECR docker image for app
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ginroot-template-service
          IMAGE_TAG: latest
        run: |
          docker build . -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG  
   
      - name: TAG for other branch. AWS ECR docker image for app
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ginroot-template-service
          IMAGE_TAG: ${{ steps.slug.outputs.branch-name-slug }}-${{ steps.slug.outputs.commit-hash-short }}
        run: |
          docker build . -t $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG      
          # echo "-------"
          # echo ${{ steps.login-ecr.outputs.registry }}
          # echo "-------" 

  deploy:
    needs: build-image-upload-to-aws-ecr
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials for EKS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::195652531345:role/ginroot-eks-gha
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_GINROOT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_GINROOT }}
          role-duration-seconds: 3600
          role-session-name: EKSSession
         
      - name: Set kubeconfig for runner programmatically 
        run: |
          aws eks --region us-east-1 update-kubeconfig --name grt
          cat ~/.kube/config

      - name: Check out the code
        uses: actions/checkout@v2
      
      - name: Deploy PostgreSQL (stage)
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm --debug upgrade --install -n stage pgsql bitnami/postgresql --set global.postgresql.auth.database=${{ secrets.PG_DB_GINROOT }} --set global.postgresql.auth.username=${{ secrets.PG_USER_GINROOT }} --set global.postgresql.auth.password=${{ secrets.PG_PASS_GINROOT }}
      
      - name: Deploy PostgreSQL (dev)
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm --debug upgrade --install -n dev pgsql bitnami/postgresql --set global.postgresql.auth.database=${{ secrets.PG_DB_GINROOT }} --set global.postgresql.auth.username=${{ secrets.PG_USER_GINROOT }} --set global.postgresql.auth.password=${{ secrets.PG_PASS_GINROOT }}

      - name: Deploy the Helm chart (with more verbosity) if commit came the Main branch
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          # echo "-------"
          # echo ${{ steps.login-ecr.outputs.registry }}
          # echo "-------" 
          helm --debug upgrade --install template-service ./chart -i --atomic --set image.repository=${{ needs.build-image-upload-to-aws-ecr.outputs.output1 }}/ginroot-template-service,image.tag=latest -n stage
       
      - name: Deploy the Helm chart (with more verbosity) if commit came to other branch
        run: |
          # echo "-------"
          # echo ${{ steps.login-ecr.outputs.registry }}
          # echo "-------" 
          helm --debug upgrade --install template-service ./chart -i --atomic --set image.repository=${{ needs.build-image-upload-to-aws-ecr.outputs.output1 }}/ginroot-template-service,image.tag=${{ needs.build-image-upload-to-aws-ecr.outputs.output2 }} -n dev

#      - name: Deploy to cluster if commit came to the Main branch
#        uses: kodermax/kubectl-aws-eks@master
#        if: ${{ github.ref == 'refs/heads/main' }}
#        env:
#        #  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_GRT_STAGE }}
#          IAM_VERSION: "0.5.6"
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ginroot-template-service
#          IMAGE_TAG: latest
#        with:
#          args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#      - name: Deploy to cluster if commit came to other branch
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_GRT_DEV }}
#          IAM_VERSION: "0.5.6"
#          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#          ECR_REPOSITORY: ginroot-template-service
#          IMAGE_TAG: ${{ steps.slug.outputs.branch-name-slug }}-${{ steps.slug.outputs.commit-hash-short }}
#        with:
#          args: set image deployment/$ECR_REPOSITORY $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         
#      - name: Verify deployment if commit came to the Main branch
#        uses: kodermax/kubectl-aws-eks@master
#        if: ${{ github.ref == 'refs/heads/main' }}
#        env:
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_GRT_STAGE }}
#          IAM_VERSION: "0.5.6"
#        with:
#          args: rollout status deployment/ginroot-template-service
         
#      - name: Verify deployment if commit came to other branch
#        uses: kodermax/kubectl-aws-eks@master
#        env:
#          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA_GRT_DEV }}
#          IAM_VERSION: "0.5.6"
#        with:
#          args: rollout status deployment/ginroot-template-service
