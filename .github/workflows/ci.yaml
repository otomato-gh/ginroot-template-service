# .github/workflows/app.yaml
name: Test app with DB and build then
# on: workflow_dispatch
on: 
 push:
    branches: ci

jobs:

  postgres:
    # containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `postgres` executes in
    container: ubuntu
    # service containers to run with `postgres` job
    services:
      # label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:latest
        # service environment variables
        # `POSTGRES_HOST` is `postgres`
        env:
          # optional (defaults to `postgres`)
          POSTGRES_DB: test_db
          # required
          POSTGRES_PASSWORD: qwerty123
          # optional (defaults to `5432`)
          POSTGRES_PORT: 5432
          # optional (defaults to `postgres`)
          POSTGRES_USER: admin
        ports:
          # maps tcp port 5432 on service container to the host
          - 5432:5432
        # set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install PostgreSQL client
        run: |
          apt-get update
          apt-get install --yes postgresql-client

      # queries database with postgres client
      - name: Query Database and Import SQL
        run: psql -h postgres -d test_db -U admin -c 'CREATE TABLE template (id integer primary key generated always as identity, 
                                                 language character varying(20) NOT NULL, 
                                                 framework character varying(20), 
                                                 app_type character varying(20), 
                                                 db_type character varying(20), 
                                                 cloud_provider character varying(20) NOT NULL, 
                                                 iac_type character varying(20) NOT NULL, 
                                                 deployment_type character varying(20) NOT NULL, 
                                                 repo_url character varying(255) NOT NULL);'
        env:
          # postgress password is required; alternatively, you can run:
          # `PGPASSWORD=postgres_password psql ...`
          PGPASSWORD: qwerty123
          
          
  test:
     needs: postgres
     runs-on: ubuntu-latest
     container: ubuntu

     steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry config virtualenvs.create true
          poetry install          
          
      - name: Test application's code with Poetry
        env: 
          # PROJECT_NAME: ${{ secrets.PROJECT_NAME }} # It turned out that I have no access to repo secrets
          PROJECT_NAME: template_svc
          POSTGRES_SERVER: localhost:5432
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: qwerty123
          POSTGRES_DB: test_db
        run: |
          poetry config --local virtualenvs.in-project true
          poetry lock --no-update
          poetry run pytest -v app
          
          
